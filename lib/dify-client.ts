import { DIFY_CONFIG, NewsCategory, NewsItem, DifyResponse } from './dify-config'

export class DifyClient {
  private baseUrl: string
  private apiKey: string
  private appId: string

  constructor() {
    this.baseUrl = DIFY_CONFIG.baseUrl
    this.apiKey = DIFY_CONFIG.apiKey
    this.appId = DIFY_CONFIG.appId
  }

  private async makeRequest(endpoint: string, body: any): Promise<any> {
    try {
      console.log('=== Dify API Request ===')
      console.log('Endpoint:', endpoint)
      console.log('Body:', JSON.stringify(body, null, 2))
      console.log('API Key:', this.apiKey ? 'Set' : 'Not set')
      console.log('App ID:', this.appId ? 'Set' : 'Not set')
      console.log('=======================')

      const response = await fetch('/api/dify', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          endpoint,
          body
        }),
      })

      if (!response.ok) {
        const errorText = await response.text()
        console.log('=== Dify API Error ===')
        console.log('Status:', response.status)
        console.log('Status Text:', response.statusText)
        console.log('Error Response:', errorText)
        console.log('======================')
        throw new Error(`Dify API error: ${response.status} ${response.statusText} - ${errorText}`)
      }

      const data = await response.json()
      console.log('=== Dify API Success ===')
      console.log('Response:', JSON.stringify(data, null, 2))
      console.log('========================')
      return data
    } catch (error) {
      console.error('=== Dify API Error ===')
      console.error('Error:', error)
      console.error('======================')
      throw error
    }
  }

  async fetchNews(category: NewsCategory, limit: number = 5): Promise<NewsItem[]> {
    try {
      console.log(`Fetching news for category: ${category}, limit: ${limit}`)
      
      const prompt = this.generateNewsPrompt(category, limit)
      console.log('Generated prompt:', prompt)

      // „Ç´„ÉÜ„Ç¥„É™Âêç„ÇíÊ≠£„Åó„ÅÑÂΩ¢Âºè„Å´Â§âÊèõ
      const categoryMapping = {
        'business': 'ÁµåÊ∏à„Éª„Éì„Ç∏„Éç„Çπ (business)',
        'technology': '„ÉÜ„ÇØ„Éé„É≠„Ç∏„Éº (technology)',
        'politics': 'ÊîøÊ≤ª„ÉªÂõΩÈöõÈñ¢‰øÇ (politics)'
      }

      const requestBody = {
        inputs: {
          trigger_type: 'ÂÖ®„Ç´„ÉÜ„Ç¥„É™„Éã„É•„Éº„ÇπÂèñÂæó (all_news)  ',
          category: categoryMapping[category] || 'ÁµåÊ∏à„Éª„Éì„Ç∏„Éç„Çπ (business)',
        },
        query: prompt,
        response_mode: 'blocking',
        conversation_id: '',
        user: 'business-news-app',
        files: [],
        auto_generate_name: false,
      }

      const response = await this.makeRequest(DIFY_CONFIG.endpoints.chat, requestBody)
      
      if (response && response.answer) {
        console.log('Dify response received, parsing...')
        return this.parseAllCategoriesResponse(response, category)
      } else {
        console.log('No answer in response, using fallback')
        return this.getFallbackNews(category, limit)
      }
    } catch (error) {
      console.error('Error fetching news from Dify:', error)
      
      // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const errorMessage = error instanceof Error ? error.message : 'Unknown error'
      console.log('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', errorMessage)
      
      if (errorMessage.includes('timeout') || errorMessage.includes('408')) {
        console.log('„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Ç®„É©„Éº: Dify„ÅÆÂá¶ÁêÜ„Å´ÊôÇÈñì„Åå„Åã„Åã„Çä„Åô„Åé„Å¶„ÅÑ„Åæ„Åô')
        return this.getFallbackNews(category, limit)
      }
      
      if (errorMessage.includes('429') || errorMessage.includes('quota') || errorMessage.includes('tpm') || errorMessage.includes('context')) {
        console.log('„É¨„Éº„ÉàÂà∂Èôê„Åæ„Åü„ÅØ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÂà∂Èôê„Ç®„É©„Éº: „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éã„É•„Éº„Çπ„ÇíËøî„Åó„Åæ„Åô')
        return this.getFallbackNews(category, limit)
      }
      
      console.log('„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éã„É•„Éº„Çπ„ÇíËøî„Åó„Åæ„Åô')
      return this.getFallbackNews(category, limit)
    }
  }

  private generateNewsPrompt(category: NewsCategory, limit: number): string {
    return "„Éã„É•„Éº„Çπ„ÇíÂèñÂæó„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
  }

  private parseAllCategoriesResponse(response: DifyResponse, category: NewsCategory): NewsItem[] {
    try {
      console.log('Parsing all categories response:', response)
      
      // „É¨„Çπ„Éù„É≥„ÇπÊßãÈÄ†„ÇíÁ¢∫Ë™ç
      let answer = ''
      if (response && response.answer) {
        answer = response.answer
      } else if (response && typeof response === 'string') {
        answer = response
      } else if (response && (response as any).result && (response as any).result.answer) {
        answer = (response as any).result.answer
      } else {
        console.log('No valid answer found in response:', response)
        return []
      }
      
      const allNewsItems: NewsItem[] = []
      
      console.log('Full response length:', answer.length)
      console.log('Full response (first 1000 chars):', answer.substring(0, 1000))
      console.log('Full response (last 1000 chars):', answer.substring(answer.length - 1000))
      
      // „Éá„Éê„ÉÉ„Ç∞: ÂÆüÈöõ„ÅÆÂá∫ÂäõÂΩ¢Âºè„ÇíË©≥„Åó„ÅèÁ¢∫Ë™ç
      console.log('=== FULL RESPONSE CONTENT ===')
      console.log(answer)
      console.log('=== END FULL RESPONSE ===')
      
      // „Éá„Éê„ÉÉ„Ç∞: „É¨„Çπ„Éù„É≥„ÇπÂÖ®‰Ωì„Å´URL„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
      const allUrlsInResponse = answer.match(/https?:\/\/[^\s\n]+/g)
      if (allUrlsInResponse && allUrlsInResponse.length > 0) {
        console.log(`üîç Found ${allUrlsInResponse.length} URLs in full response:`, allUrlsInResponse)
      } else {
        console.log(`‚ùå No URLs found in full response`)
      }
      
      // „Éá„Éê„ÉÉ„Ç∞: „ÄêURL„Äë„Éë„Çø„Éº„É≥„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
      const urlMarkers = answer.match(/„ÄêURL„Äë/g)
      if (urlMarkers && urlMarkers.length > 0) {
        console.log(`üîç Found ${urlMarkers.length} „ÄêURL„Äë markers in full response`)
      } else {
        console.log(`‚ùå No „ÄêURL„Äë markers found in full response`)
      }
      
      // ÂêÑ„Ç´„ÉÜ„Ç¥„É™„ÅÆÂá∫ÁèæÂõûÊï∞„ÇíÁ¢∫Ë™ç
      const categories = ['„ÉÜ„ÇØ„Éé„É≠„Ç∏„Éº', 'ÁµåÊ∏à„Éª„Éì„Ç∏„Éç„Çπ', 'ÊîøÊ≤ª„ÉªÂõΩÈöõÈñ¢‰øÇ', 'ÁµåÊ∏à', 'ÊîøÊ≤ª']
      categories.forEach(cat => {
        const count = (answer.match(new RegExp(`„Äê${cat}„Äë`, 'g')) || []).length
        console.log(`Category "${cat}" appears ${count} times`)
      })
      
      // ‚óæÔ∏è „ÅÆÂá∫ÁèæÂõûÊï∞„ÇíÁ¢∫Ë™ç
      const bulletCount = (answer.match(/‚óæÔ∏è/g) || []).length
      console.log(`Total ‚óæÔ∏è bullets found: ${bulletCount}`)
      
      console.log('=============================')
      
      // „Éá„Éê„ÉÉ„Ç∞: ÂÆüÈöõ„ÅÆ„É¨„Çπ„Éù„É≥„ÇπÊßãÈÄ†„ÇíÁ¢∫Ë™ç
      console.log('üîç Debugging response structure:')
      console.log('Response type:', typeof response)
      console.log('Response keys:', Object.keys(response || {}))
      if (response && response.answer) {
        console.log('‚úÖ Found response.answer')
        console.log('Answer type:', typeof response.answer)
        console.log('Answer length:', response.answer.length)
      }
      if (response && (response as any).files) {
        console.log('‚úÖ Found response.files:', (response as any).files)
      }
      
      // „Ç´„ÉÜ„Ç¥„É™Âêç„ÅÆ„Éë„Çø„Éº„É≥„ÇíÂÆöÁæ©Ôºà„Çà„ÇäÊüîËªü„Å´Ôºâ
      const categoryPatterns = [
        { name: '„ÉÜ„ÇØ„Éé„É≠„Ç∏„Éº', key: 'technology' },
        { name: 'ÁµåÊ∏à„Éª„Éì„Ç∏„Éç„Çπ', key: 'business' },
        { name: 'ÊîøÊ≤ª„ÉªÂõΩÈöõÈñ¢‰øÇ', key: 'politics' },
        { name: 'ÁµåÊ∏à', key: 'business' },
        { name: 'ÊîøÊ≤ª', key: 'politics' },
        { name: 'TECHNOLOGY', key: 'technology' },
        { name: 'BUSINESS', key: 'business' },
        { name: 'POLITICS', key: 'politics' },
        { name: 'Technology', key: 'technology' },
        { name: 'Business', key: 'business' },
        { name: 'Politics', key: 'politics' }
      ]
      
      // ÂêÑ„Ç´„ÉÜ„Ç¥„É™„ÇíËß£Êûê
      categoryPatterns.forEach(({ name, key }) => {
        // Ë§áÊï∞„ÅÆ„Éë„Çø„Éº„É≥„Åß„Ç´„ÉÜ„Ç¥„É™„ÇíÊ§úÁ¥¢Ôºà„Çà„ÇäÊüîËªü„Å´Ôºâ
        const patterns = [
          new RegExp(`„Äê${name}„Äë([\\s\\S]*?)(?=„Äê|$)`),
          new RegExp(`${name}Ôºö([\\s\\S]*?)(?=„Äê|$)`),
          new RegExp(`${name}\\s*([\\s\\S]*?)(?=„Äê|$)`),
          new RegExp(`„Äê${name}„Äë([\\s\\S]*?)(?=„Äê|$)`),
          new RegExp(`=== ${name} ===([\\s\\S]*?)(?===|$)`),
          new RegExp(`${name} NEWS([\\s\\S]*?)(?=${name} NEWS|$)`),
          new RegExp(`${name}\\s*NEWS([\\s\\S]*?)(?=${name}\\s*NEWS|$)`),
          new RegExp(`${name}:([\\s\\S]*?)(?=${name}:|$)`),
        ]
        
        let categoryContent = ''
        let foundPattern = ''
        
        for (const pattern of patterns) {
          const match = answer.match(pattern)
          if (match) {
            categoryContent = match[1].trim()
            foundPattern = pattern.source
            console.log(`Found category "${name}" with pattern: ${foundPattern}`)
            console.log(`Category content length: ${categoryContent.length}`)
            break
          }
        }
        
        if (categoryContent) {
          console.log(`Found ${name} content using pattern: ${foundPattern}`)
          console.log(`Content length: ${categoryContent.length}`)
          console.log(`Content preview:`, categoryContent.substring(0, 300) + '...')
          
          // „Éá„Éê„ÉÉ„Ç∞: „Ç´„ÉÜ„Ç¥„É™„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Å´URL„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
          const categoryUrls = categoryContent.match(/https?:\/\/[^\s\n]+/g)
          if (categoryUrls && categoryUrls.length > 0) {
            console.log(`üîç Found ${categoryUrls.length} URLs in ${name} content:`, categoryUrls)
          } else {
            console.log(`‚ùå No URLs found in ${name} content`)
          }
          
          const items = this.parseDifyFormatResponse(categoryContent, key as NewsCategory)
          console.log(`Parsed ${items.length} items for ${name}`)
          allNewsItems.push(...items)
        } else {
          console.log(`No content found for ${name} with any pattern`)
        }
      })
      
      // „Ç´„ÉÜ„Ç¥„É™„ÅåÂÖ®„ÅèÊ§úÂá∫„Åï„Çå„Å™„ÅÑÂ†¥Âêà„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
      if (allNewsItems.length === 0) {
        console.log('‚ùå No categories detected, trying fallback parsing...')
        const fallbackItems = this.parseFallbackResponse(answer)
        console.log(`Fallback parsing found ${fallbackItems.length} items`)
        return fallbackItems
      }
      
      return allNewsItems
    } catch (error) {
      console.error('Error parsing all categories response:', error)
      return []
    }
  }

  private parseFallbackResponse(content: string): NewsItem[] {
    const newsItems: NewsItem[] = []
    
    console.log('=== Fallback parsing ===')
    console.log('Content length:', content.length)
    console.log('Content preview:', content.substring(0, 500) + '...')
    
    // URL„Åã„ÇâË®ò‰∫ã„ÇíÊé®Ê∏¨
    const urls = content.match(/https?:\/\/[^\s\n]+/g) || []
    console.log(`Found ${urls.length} URLs for fallback parsing`)
    
    // ÂêÑURL„Å´ÂØæ„Åó„Å¶Ë®ò‰∫ã„Çí‰ΩúÊàê
    urls.forEach((url, index) => {
      console.log(`Processing URL ${index + 1}/${urls.length}: ${url}`)
      
      // URL„ÅÆÂâçÂæå„Åã„Çâ„Çø„Ç§„Éà„É´„ÇíÊé®Ê∏¨
      const urlIndex = content.indexOf(url)
      const beforeUrl = content.substring(Math.max(0, urlIndex - 200), urlIndex)
      const afterUrl = content.substring(urlIndex + url.length, Math.min(content.length, urlIndex + url.length + 200))
      
      console.log(`  URL index: ${urlIndex}`)
      console.log(`  Before URL: ${beforeUrl}`)
      console.log(`  After URL: ${afterUrl}`)
      
      // „Çø„Ç§„Éà„É´„ÇíÊäΩÂá∫Ôºà„Çà„ÇäÁ©çÊ•µÁöÑ„Å´Ôºâ
      let title = `„Éã„É•„Éº„ÇπË®ò‰∫ã ${index + 1}`
      
      // Ë§áÊï∞„ÅÆÊñπÊ≥ï„Åß„Çø„Ç§„Éà„É´„ÇíÊäΩÂá∫
      const titlePatterns = [
        /([^\n]{10,100})/g,
        /([A-Za-z][^\n]{10,100})/g,
        /([^„ÄÇ\n]{10,100})/g
      ]
      
      for (const pattern of titlePatterns) {
        const titleMatch = beforeUrl.match(pattern)
        if (titleMatch && titleMatch.length > 0) {
          const candidate = titleMatch[titleMatch.length - 1].trim()
          if (candidate.length > 10 && candidate.length < 100) {
            title = candidate
            break
          }
        }
      }
      
      // Ê¶ÇË¶Å„ÇíÊäΩÂá∫
      let summary = 'Dify AI„ÅåÁîüÊàê„Åó„Åü„Éã„É•„Éº„ÇπË®ò‰∫ã„Åß„Åô„ÄÇ'
      const summaryMatch = beforeUrl.match(/([^\n]{20,200})/g)
      if (summaryMatch && summaryMatch.length > 0) {
        summary = summaryMatch[summaryMatch.length - 1].trim()
      }
      
      // „Ç´„ÉÜ„Ç¥„É™„ÇíÊé®Ê∏¨ÔºàURL„ÅÆ„Éâ„É°„Ç§„É≥„Åã„ÇâÔºâ
      let category: NewsCategory = 'business'
      if (url.includes('tech') || url.includes('ai') || url.includes('apple') || url.includes('scitech')) {
        category = 'technology'
      } else if (url.includes('politics') || url.includes('government') || url.includes('bloomberg')) {
        category = 'politics'
      }
      
      console.log(`Fallback item ${index + 1}:`)
      console.log(`  Title: ${title}`)
      console.log(`  Summary: ${summary.substring(0, 50)}...`)
      console.log(`  URL: ${url}`)
      console.log(`  Category: ${category}`)
      
      const newsItem = {
        id: `fallback-${Date.now()}-${index}`,
        title: title,
        summary: summary,
        businessInsight: 'Dify AI„ÅåÁîüÊàê„Åó„Åü„Éì„Ç∏„Éç„ÇπÊ¥ûÂØü„Åß„Åô„ÄÇ',
        url: url,
        timestamp: new Date().toISOString(),
        category: category,
        source: 'Dify AI (Fallback)',
      }
      
      newsItems.push(newsItem)
      console.log(`‚úÖ Added fallback item ${index + 1} to newsItems`)
    })
    
    console.log(`Total fallback items created: ${newsItems.length}`)
    
    return newsItems
  }

  private parseNewFormatResponse(content: string, category: NewsCategory): NewsItem[] {
    const newsItems: NewsItem[] = []
    
    console.log(`=== Parsing new format for ${category} ===`)
    console.log(`Content length: ${content.length}`)
    console.log(`Content preview: ${content.substring(0, 500)}...`)
    console.log(`Content contains TITLE:: ${content.includes('TITLE:')}`)
    
    // „Çà„ÇäÁ¢∫ÂÆü„Å™ÊñπÊ≥ï: Ë®ò‰∫ã„Éñ„É≠„ÉÉ„ÇØ„ÇíÂàÜÂâ≤„Åó„Å¶Âá¶ÁêÜ
    // TITLE: „ÅßÂßã„Åæ„Çã„Éñ„É≠„ÉÉ„ÇØ„ÇíÂàÜÂâ≤
    const articleBlocks = content.split(/(?=TITLE:)/g).filter(block => block.trim().startsWith('TITLE:'))
    
    console.log(`Found ${articleBlocks.length} article blocks`)
    console.log(`Article blocks:`, articleBlocks.map((block, i) => `Block ${i + 1}: ${block.substring(0, 100)}...`))
    
    articleBlocks.forEach((block, index) => {
      console.log(`Processing article block ${index + 1}:`)
      console.log(`Block content: ${block.substring(0, 200)}...`)
      
      const titleMatch = block.match(/TITLE:\s*([^\n]+)/)
      const summaryMatch = block.match(/SUMMARY:\s*([^\n]+)/)
      const insightMatch = block.match(/INSIGHT:\s*([^\n]+)/)
      const urlMatch = block.match(/URL:\s*([^\n]+)/)
      
      const title = titleMatch ? titleMatch[1].trim() : ''
      const summary = summaryMatch ? summaryMatch[1].trim() : 'Ê¶ÇË¶Å„ÇíÁîüÊàê‰∏≠...'
      const insight = insightMatch ? insightMatch[1].trim() : '„Éì„Ç∏„Éç„ÇπÁ§∫ÂîÜ„ÇíÁîüÊàê‰∏≠...'
      const url = urlMatch ? urlMatch[1].trim() : ''
      
      console.log(`  Title: ${title}`)
      console.log(`  Summary: ${summary.substring(0, 50)}...`)
      console.log(`  Insight: ${insight.substring(0, 50)}...`)
      console.log(`  URL: ${url}`)
      console.log(`  URL length: ${url.length}`)
      
      if (title) {
        newsItems.push({
          id: `${category}-${Date.now()}-${index}`,
          title: title,
          summary: summary,
          businessInsight: insight,
          url: url,
          timestamp: new Date().toISOString(),
          category: category,
          source: 'Dify AI',
        })
        console.log(`‚úÖ Added article ${index + 1} to newsItems`)
      } else {
        console.log(`‚ùå Skipped article ${index + 1} due to missing title`)
      }
    })
    
    return newsItems
  }

  private parseDifyFormatResponse(content: string, category: NewsCategory): NewsItem[] {
    const newsItems: NewsItem[] = []
    
    console.log(`=== Parsing ${category} content ===`)
    console.log('Content:', content.substring(0, 500) + '...')
    
    // Êñ∞„Åó„ÅÑÂΩ¢ÂºèÔºàTITLE:, URL: ÂΩ¢ÂºèÔºâ„ÇíË©¶Ë°å
    const newFormatItems = this.parseNewFormatResponse(content, category)
    console.log(`New format parsing result: ${newFormatItems.length} items`)
    
    if (newFormatItems.length > 0) {
      console.log(`‚úÖ Using new format with ${newFormatItems.length} items`)
      return newFormatItems
    }
    
    console.log(`‚ùå New format failed, trying legacy format`)
    
    // Ë§áÊï∞„ÅÆ„Çø„Ç§„Éà„É´„Éë„Çø„Éº„É≥„ÇíË©¶Ë°å
    const titlePatterns = [
      /‚óæÔ∏è\s*([^\n]+)/g,
      /‚Ä¢\s*([^\n]+)/g,
      /-\s*([^\n]+)/g,
      /\d+\.\s*([^\n]+)/g,
    ]
    
    let titleMatches: string[] = []
    let usedPattern = ''
    
    for (const pattern of titlePatterns) {
      const matches = content.match(pattern)
      if (matches && matches.length > 0) {
        titleMatches = matches
        usedPattern = pattern.source
        console.log(`Found ${matches.length} titles using pattern: ${pattern.source}`)
        break
      }
    }
    
    // „Çø„Ç§„Éà„É´„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅÂÜÖÂÆπÂÖ®‰Ωì„Çí1„Å§„ÅÆ„Ç¢„Ç§„ÉÜ„É†„Å®„Åó„Å¶Êâ±„ÅÜ
    if (titleMatches.length === 0) {
      console.log('No titles found, treating entire content as single item')
      titleMatches = ['„ÄêÂçò‰∏Ä„Éã„É•„Éº„Çπ„Äë']
      usedPattern = 'single'
    }
    
    if (titleMatches.length > 0) {
      console.log(`Found ${titleMatches.length} titles:`, titleMatches)
      
      titleMatches.forEach((match, index) => {
        // „Éë„Çø„Éº„É≥„Å´Âøú„Åò„Å¶„Çø„Ç§„Éà„É´„ÇíÊäΩÂá∫
        let title = ''
        let itemContent = ''
        
        if (usedPattern === 'single') {
          // Âçò‰∏Ä„Ç¢„Ç§„ÉÜ„É†„ÅÆÂ†¥Âêà„ÄÅÂÜÖÂÆπÂÖ®‰Ωì„Çí‰ΩøÁî®
          title = `${DIFY_CONFIG.categories[category]}„Éã„É•„Éº„Çπ`
          itemContent = content
        } else {
          if (usedPattern.includes('‚óæÔ∏è')) {
            title = match.replace(/‚óæÔ∏è\s*/, '').trim()
          } else if (usedPattern.includes('‚Ä¢')) {
            title = match.replace(/‚Ä¢\s*/, '').trim()
          } else if (usedPattern.includes('-')) {
            title = match.replace(/-\s*/, '').trim()
          } else if (usedPattern.includes('\\d')) {
            title = match.replace(/\d+\.\s*/, '').trim()
          }
          
          // „Çø„Ç§„Éà„É´„ÅÆÂæå„ÅÆÂÜÖÂÆπ„ÇíÂèñÂæóÔºàURL„ÇÇÂê´„ÇÅ„ÇãÔºâ
          const titleIndex = content.indexOf(match)
          let nextTitleIndex = index < titleMatches.length - 1 
            ? content.indexOf(titleMatches[index + 1])
            : content.length
          
          // Ê¨°„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Çª„ÇØ„Ç∑„Éß„É≥Ôºà„Äê„Äë„ÅßÂßã„Åæ„ÇãÔºâ„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åù„Çå„Çà„ÇäÂâç„ÅßÂàá„ÇäÂèñ„Çã
          const nextCategoryIndex = content.indexOf('„Äê', titleIndex + match.length)
          if (nextCategoryIndex !== -1 && nextCategoryIndex < nextTitleIndex) {
            nextTitleIndex = nextCategoryIndex
          }
          
          itemContent = content.substring(titleIndex, nextTitleIndex)
          
          // URL„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅ„Çà„ÇäÂ∫É„ÅÑÁØÑÂõ≤„ÇíÂèñÂæó
          if (!itemContent.includes('„ÄêURL„Äë') && !itemContent.includes('http')) {
            console.log(`üîç URL not found in itemContent, expanding range...`)
            console.log(`Current itemContent length: ${itemContent.length}`)
            console.log(`Current itemContent preview: ${itemContent.substring(0, 200)}...`)
            
            // „Çà„ÇäÁ©çÊ•µÁöÑ„Å´ÁØÑÂõ≤„ÇíÊã°Âºµ - Ê¨°„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Çª„ÇØ„Ç∑„Éß„É≥„Åæ„Åß
            let extendedEnd = content.length
            
            // Ê¨°„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Çª„ÇØ„Ç∑„Éß„É≥Ôºà„Äê„Äë„ÅßÂßã„Åæ„ÇãÔºâ„ÇíÊé¢„Åô
            const nextCategoryIndex = content.indexOf('„Äê', titleIndex + match.length)
            if (nextCategoryIndex !== -1) {
              extendedEnd = nextCategoryIndex
              console.log(`Found next category at index: ${nextCategoryIndex}`)
            } else {
              console.log(`No next category found, using full content length: ${content.length}`)
            }
            
            itemContent = content.substring(titleIndex, extendedEnd)
            console.log(`‚úÖ Extended item content to include URL. New length: ${itemContent.length}`)
            console.log(`Extended itemContent preview: ${itemContent.substring(0, 300)}...`)
            console.log(`Extended itemContent contains „ÄêURL„Äë: ${itemContent.includes('„ÄêURL„Äë')}`)
            console.log(`Extended itemContent contains http: ${itemContent.includes('http')}`)
          }
          
          // itemContent„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÅØ„ÄÅ„Çø„Ç§„Éà„É´„Åã„ÇâÊ¨°„ÅÆ„Çø„Ç§„Éà„É´„Åæ„Åß„ÇíÂèñÂæó
          if (!itemContent || itemContent.trim().length === 0) {
            const startIndex = content.indexOf(match)
            const endIndex = index < titleMatches.length - 1 
              ? content.indexOf(titleMatches[index + 1])
              : content.length
            itemContent = content.substring(startIndex, endIndex)
            console.log(`Fixed empty itemContent. New length: ${itemContent.length}`)
          }
        }
        
        console.log(`Processing title ${index + 1}:`, title)
        console.log(`Item content for "${title}":`, itemContent.substring(0, 300) + '...')
        console.log(`Full item content length:`, itemContent.length)
        console.log(`Item content contains „ÄêURL„Äë:`, itemContent.includes('„ÄêURL„Äë'))
        console.log(`Item content contains http:`, itemContent.includes('http'))
        console.log(`Item content contains https:`, itemContent.includes('https'))
        console.log(`Item content contains tipranks:`, itemContent.includes('tipranks'))
        
        // Ê¶ÇË¶Å„Å®„Éì„Ç∏„Éç„ÇπÁ§∫ÂîÜ„ÇíÊäΩÂá∫
        const summaryMatch = itemContent.match(/‚óéÊ¶ÇË¶Å[Ôºö:]\s*([^‚óé]+)/)
        const insightMatch = itemContent.match(/‚óé„Éì„Ç∏„Éç„ÇπÁöÑÁ§∫ÂîÜ[Ôºö:]\s*([^„Äê]+)/)
        
        const summary = summaryMatch ? summaryMatch[1].trim() : 'Ê¶ÇË¶Å„ÇíÁîüÊàê‰∏≠...'
        const insight = insightMatch ? insightMatch[1].trim() : '„Éì„Ç∏„Éç„ÇπÁ§∫ÂîÜ„ÇíÁîüÊàê‰∏≠...'
        
        // URLÊäΩÂá∫„ÅÆÊîπÂñÑ
        let url = ''
        let foundUrl = false
        
        console.log(`üîç Starting URL extraction for title: "${title}"`)
        console.log(`Item content length: ${itemContent.length}`)
        console.log(`Item content preview: ${itemContent.substring(0, 200)}...`)
        
        // ÊñπÊ≥ï1: „ÄêURL„Äë„Éë„Çø„Éº„É≥„ÇíÁõ¥Êé•Ê§úÁ¥¢
        const urlPatterns = [
          /„ÄêURL„Äë\s*(https?:\/\/[^\s\n]+)/,
          /„ÄêURL„Äë[Ôºö:]\s*([^\n]+)/,
          /„ÄêURL„Äë\s*([^\n]+)/,
          /„ÄêURL„ÄëÔºö\s*([^\n]+)/,
          /„ÄêURL„Äë\s*([^\s]+)/,
          /URL[Ôºö:]\s*([^\n]+)/,
          /„É™„É≥„ÇØ[Ôºö:]\s*([^\n]+)/,
          /https?:\/\/[^\s]+/g
        ]
        
        // Áõ¥Êé•URL„Éë„Çø„Éº„É≥„ÇíÊ§úÁ¥¢
        if (!foundUrl) {
          console.log(`üîç Testing direct URL pattern: /„ÄêURL„Äë\\s*(https?:\\/\\/[^\\s\\n]+)/`)
          const directUrlMatch = itemContent.match(/„ÄêURL„Äë\s*(https?:\/\/[^\s\n]+)/)
          if (directUrlMatch) {
            url = directUrlMatch[1].trim()
            console.log(`‚úÖ Found direct URL: ${url}`)
            foundUrl = true
          } else {
            console.log(`‚ùå No direct URL match`)
          }
        }
        
        // „Çà„ÇäÊüîËªü„Å™„ÄêURL„Äë„Éë„Çø„Éº„É≥
        if (!foundUrl) {
          console.log(`üîç Testing flexible URL pattern: /„ÄêURL„Äë\\s*([^\\n]+)/`)
          const flexibleUrlMatch = itemContent.match(/„ÄêURL„Äë\s*([^\n]+)/)
          if (flexibleUrlMatch) {
            const potentialUrl = flexibleUrlMatch[1].trim()
            console.log(`Found potential URL: "${potentialUrl}"`)
            if (potentialUrl.startsWith('http')) {
              url = potentialUrl
              console.log(`‚úÖ Found URL with flexible pattern: ${url}`)
              foundUrl = true
            } else {
              console.log(`‚ùå Potential URL doesn't start with http: "${potentialUrl}"`)
            }
          } else {
            console.log(`‚ùå No flexible URL match`)
          }
        }
        
        // Áõ¥Êé•http(s)URL„ÇíÊ§úÁ¥¢
        if (!foundUrl) {
          console.log(`üîç Testing direct HTTP URL pattern: /https?:\\/\\/[^\\s\\n]+/g`)
          const httpUrls = itemContent.match(/https?:\/\/[^\s\n]+/g)
          if (httpUrls && httpUrls.length > 0) {
            url = httpUrls[0].trim()
            console.log(`‚úÖ Found direct HTTP URL: ${url}`)
            foundUrl = true
          } else {
            console.log(`‚ùå No direct HTTP URL match`)
          }
        }
        
        // ÂÖÉ„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑÂÖ®‰Ωì„Åã„ÇâURL„ÇíÊ§úÁ¥¢
        if (!foundUrl) {
          console.log(`üîç Searching in original content...`)
          const originalContent = content
          const allUrlsInOriginal = originalContent.match(/https?:\/\/[^\s\n]+/g)
          if (allUrlsInOriginal && allUrlsInOriginal.length > 0) {
            console.log(`Found ${allUrlsInOriginal.length} URLs in original content:`, allUrlsInOriginal)
            console.log(`Searching for title: "${title}"`)
            console.log(`Title index in original content: ${originalContent.indexOf(title)}`)
            
            // „Çø„Ç§„Éà„É´„Å´Èñ¢ÈÄ£„Åô„ÇãURL„ÇíÊé¢„Åô
            for (const urlCandidate of allUrlsInOriginal) {
              const urlIndex = originalContent.indexOf(urlCandidate)
              const titleIndex = originalContent.indexOf(title)
              const distance = Math.abs(urlIndex - titleIndex)
              console.log(`URL: ${urlCandidate}`)
              console.log(`URL index: ${urlIndex}, Title index: ${titleIndex}, Distance: ${distance}`)
              
              if (distance < 5000) { // Ë∑ùÈõ¢„Çí5000ÊñáÂ≠ó„Å´Â§ßÂπÖÊã°Âºµ
                url = urlCandidate.trim()
                console.log(`‚úÖ Found URL near title in original content: ${url}`)
                foundUrl = true
                break
              } else {
                console.log(`‚ùå URL too far from title (distance: ${distance})`)
              }
            }
          } else {
            console.log(`‚ùå No URLs found in original content`)
          }
        }
        
        // ÊúÄÂæå„ÅÆÊâãÊÆµ: „Ç´„ÉÜ„Ç¥„É™„Ç≥„É≥„ÉÜ„É≥„ÉÑÂÖ®‰Ωì„Åã„ÇâÁõ¥Êé•URL„ÇíÊ§úÁ¥¢
        if (!foundUrl) {
          console.log(`üîç Searching for URLs in category content...`)
          console.log(`Category content length: ${content.length}`)
          console.log(`Category content preview: ${content.substring(0, 500)}...`)
          
          const categoryUrls = content.match(/https?:\/\/[^\s\n]+/g)
          if (categoryUrls && categoryUrls.length > 0) {
            console.log(`Found ${categoryUrls.length} URLs in category content:`, categoryUrls)
            
            // „Çø„Ç§„Éà„É´„Å´ÊúÄ„ÇÇËøë„ÅÑURL„ÇíÈÅ∏Êäû
            let bestUrl = categoryUrls[0]
            let minDistance = Infinity
            
            for (const urlCandidate of categoryUrls) {
              const urlIndex = content.indexOf(urlCandidate)
              const titleIndex = content.indexOf(title)
              const distance = Math.abs(urlIndex - titleIndex)
              
              if (distance < minDistance) {
                minDistance = distance
                bestUrl = urlCandidate
              }
            }
            
            url = bestUrl.trim()
            console.log(`‚úÖ Using closest URL from category content: ${url} (distance: ${minDistance})`)
            foundUrl = true
          } else {
            console.log(`‚ùå No URLs found in category content`)
            console.log(`Content contains http: ${content.includes('http')}`)
            console.log(`Content contains https: ${content.includes('https')}`)
            console.log(`Content contains „ÄêURL„Äë: ${content.includes('„ÄêURL„Äë')}`)
          }
        } else {
          console.log(`‚úÖ URL already found: ${url}`)
        }
        
        // ÊúÄÁµÇÊâãÊÆµ: „É¨„Çπ„Éù„É≥„ÇπÂÖ®‰Ωì„Åã„ÇâÁõ¥Êé•URL„ÇíÊäΩÂá∫
        if (!foundUrl) {
          console.log(`üîç Final attempt: Searching in full response...`)
          // „Åì„ÅÆÈñ¢Êï∞„ÅÆÂ§ñ„Åã„Çâ„É¨„Çπ„Éù„É≥„ÇπÂÖ®‰Ωì„Å´„Ç¢„ÇØ„Çª„Çπ„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã
          // ‰∏ÄÊôÇÁöÑ„Å™Ëß£Ê±∫Á≠ñ„Å®„Åó„Å¶„ÄÅ„Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„Çí‰ΩøÁî®
          if (typeof window !== 'undefined' && (window as any).lastDifyResponse) {
            const fullResponse = (window as any).lastDifyResponse
            const fullUrls = fullResponse.match(/https?:\/\/[^\s\n]+/g)
            if (fullUrls && fullUrls.length > 0) {
              console.log(`Found ${fullUrls.length} URLs in full response:`, fullUrls)
              
              // „Çø„Ç§„Éà„É´„Å´ÊúÄ„ÇÇËøë„ÅÑURL„ÇíÈÅ∏Êäû
              let bestUrl = fullUrls[0]
              let minDistance = Infinity
              
              for (const urlCandidate of fullUrls) {
                const urlIndex = fullResponse.indexOf(urlCandidate)
                const titleIndex = fullResponse.indexOf(title)
                const distance = Math.abs(urlIndex - titleIndex)
                
                if (distance < minDistance) {
                  minDistance = distance
                  bestUrl = urlCandidate
                }
              }
              
              url = bestUrl.trim()
              console.log(`‚úÖ Using closest URL from full response: ${url} (distance: ${minDistance})`)
              foundUrl = true
            }
          }
        }
        
        if (!foundUrl) {
          console.log(`No URL found in content: ${itemContent}`)
          console.log(`Content length: ${itemContent.length}`)
          console.log(`Content contains „ÄêURL„Äë: ${itemContent.includes('„ÄêURL„Äë')}`)
          console.log(`Content contains http: ${itemContent.includes('http')}`)
          console.log(`Content contains https: ${itemContent.includes('https')}`)
          console.log(`Content contains tipranks: ${itemContent.includes('tipranks')}`)
          
          // ÊúÄÂæå„ÅÆÊâãÊÆµ: ÂÖÉ„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Åã„ÇâÊúÄÂàù„ÅÆURL„Çí‰ΩøÁî®
          const originalContent = content
          const firstUrl = originalContent.match(/https?:\/\/[^\s\n]+/)
          if (firstUrl) {
            url = firstUrl[0].trim()
            console.log(`‚úÖ Using first URL from original content: ${url}`)
          } else {
            // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „ÉÜ„Çπ„ÉàÁî®URL„ÇíË®≠ÂÆö
            url = 'https://example.com/fallback-news'
            console.log(`‚ùå Using fallback URL: ${url}`)
          }
        }
        
        console.log(`Extracted - Summary: ${summary.substring(0, 50)}...`)
        console.log(`Extracted - Insight: ${insight.substring(0, 50)}...`)
        console.log(`Extracted - URL: ${url}`)
        console.log(`URL length: ${url.length}`)
        console.log(`URL is empty: ${url === ''}`)
        console.log(`Final URL for news item: "${url}"`)
        
        newsItems.push({
          id: `${category}-${Date.now()}-${index}`,
          title: title,
          summary: summary,
          businessInsight: insight,
          url: url,
          timestamp: new Date().toISOString(),
          category: category,
          source: 'Dify AI',
        })
      })
    } else {
      console.log('No titles found with any pattern')
    }
    
    // „Éã„É•„Éº„Çπ„Ç¢„Ç§„ÉÜ„É†„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅÂÜÖÂÆπÂÖ®‰Ωì„Çí1„Å§„ÅÆ„Ç¢„Ç§„ÉÜ„É†„Å®„Åó„Å¶Êâ±„ÅÜ
    if (newsItems.length === 0) {
      console.log('No news items found, creating fallback item')
      newsItems.push({
        id: `${category}-${Date.now()}`,
        title: `${DIFY_CONFIG.categories[category]}„Éã„É•„Éº„Çπ`,
        summary: content.substring(0, 200) + (content.length > 200 ? '...' : ''),
        businessInsight: 'Dify AI„ÅåÁîüÊàê„Åó„Åü„Éã„É•„Éº„Çπ',
        url: '',
        timestamp: new Date().toISOString(),
        category: category,
        source: 'Dify AI',
      })
    }
    
    console.log(`=== Parsed ${newsItems.length} items for ${category} ===`)
    return newsItems
  }

  private getFallbackNews(category: NewsCategory, limit: number): NewsItem[] {
    const fallbackNews: Record<NewsCategory, NewsItem[]> = {
      business: [
        {
          id: 'fallback-business-1',
          title: 'ÁµåÊ∏àÊåáÊ®ô„ÅÆÂãïÂêë„Å®Â∏ÇÂ†¥„Å∏„ÅÆÂΩ±Èüø',
          summary: 'ÊúÄÊñ∞„ÅÆÁµåÊ∏àÊåáÊ®ô„ÅåÁô∫Ë°®„Åï„Çå„ÄÅÂ∏ÇÂ†¥„Å´Â§ß„Åç„Å™ÂΩ±Èüø„Çí‰∏é„Åà„Å¶„ÅÑ„Åæ„Åô„ÄÇGDPÊàêÈï∑Áéá„ÄÅÂ§±Ê•≠Áéá„ÄÅ„Ç§„É≥„Éï„É¨Áéá„Å™„Å©„ÅÆ‰∏ªË¶ÅÊåáÊ®ô„ÅÆÂãïÂêë„ÇíÂàÜÊûê„Åó„ÄÅ‰ªäÂæå„ÅÆÁµåÊ∏àË¶ãÈÄö„Åó„Å´„Å§„ÅÑ„Å¶ËÄÉÂØü„Åó„Åæ„Åô„ÄÇ',
          businessInsight: '‰ºÅÊ•≠„ÅØÁµåÊ∏àÊåáÊ®ô„ÅÆÂãïÂêë„ÇíÊ≥®Ë¶ñ„Åó„ÄÅÊäïË≥áÊà¶Áï•„ÇÑ‰∫ãÊ•≠Ë®àÁîª„ÅÆË¶ãÁõ¥„Åó„ÇíÊ§úË®é„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÁâπ„Å´ÈáëÂà©ÂãïÂêë„ÅØË≥áÈáëË™øÈÅî„Ç≥„Çπ„Éà„Å´Áõ¥Áµê„Åô„Çã„Åü„ÇÅ„ÄÅÊÖéÈáç„Å™ÂØæÂøú„ÅåÊ±Ç„ÇÅ„Çâ„Çå„Åæ„Åô„ÄÇ',
          url: 'https://example.com/fallback-news',
          timestamp: new Date().toISOString(),
          category: 'business',
          source: 'Fallback News',
        },
        {
          id: 'fallback-business-2',
          title: '„Ç∞„É≠„Éº„Éê„É´„Çµ„Éó„É©„Ç§„ÉÅ„Çß„Éº„É≥„ÅÆÂÜçÊßãÁØâ',
          summary: 'Âú∞ÊîøÂ≠¶ÁöÑ„É™„Çπ„ÇØ„ÅÆÈ´ò„Åæ„Çä„Å´„Çà„Çä„ÄÅ‰ºÅÊ•≠„ÅØ„Çµ„Éó„É©„Ç§„ÉÅ„Çß„Éº„É≥„ÅÆÂ§öÊßòÂåñ„Å®ÂÜçÊßãÁØâ„ÇíÈÄ≤„ÇÅ„Å¶„ÅÑ„Åæ„Åô„ÄÇ„É™„Çπ„ÇØÂàÜÊï£„Å®„Ç≥„Çπ„ÉàÊúÄÈÅ©Âåñ„ÅÆ„Éê„É©„É≥„Çπ„ÇíÂõ≥„ÇãÊñ∞„Åü„Å™Êà¶Áï•„ÅåÊ±Ç„ÇÅ„Çâ„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ',
          businessInsight: '„Çµ„Éó„É©„Ç§„ÉÅ„Çß„Éº„É≥„ÅÆÂÜçÊßãÁØâ„ÅØÁü≠ÊúüÁöÑ„Å´„ÅØ„Ç≥„Çπ„ÉàÂ¢óÂä†„Çí‰º¥„ÅÑ„Åæ„Åô„Åå„ÄÅÈï∑ÊúüÁöÑ„Å´„ÅØ‰∫ãÊ•≠„ÅÆÊåÅÁ∂öÂèØËÉΩÊÄßÂêë‰∏ä„Å´ÂØÑ‰∏é„Åó„Åæ„Åô„ÄÇÊà¶Áï•ÁöÑ„Éë„Éº„Éà„Éä„Éº„Ç∑„ÉÉ„Éó„ÅÆÊßãÁØâ„ÅåÈáçË¶Å„Åß„Åô„ÄÇ',
          url: 'https://example.com/fallback-news',
          timestamp: new Date().toISOString(),
          category: 'business',
          source: 'Fallback News',
        },
      ],
      technology: [
        {
          id: 'fallback-tech-1',
          title: 'AIÊäÄË°ì„ÅÆÈÄ≤Ê≠©„Å®„Éì„Ç∏„Éç„ÇπÂøúÁî®',
          summary: '‰∫∫Â∑•Áü•ËÉΩÊäÄË°ì„ÅåÊÄ•ÈÄü„Å´Áô∫Â±ï„Åó„ÄÅÊßò„ÄÖ„Å™Ê•≠Áïå„Åß„ÅÆÂÆüÁî®Âåñ„ÅåÈÄ≤„Çì„Åß„ÅÑ„Åæ„Åô„ÄÇÊ©üÊ¢∞Â≠¶Áøí„ÄÅËá™ÁÑ∂Ë®ÄË™ûÂá¶ÁêÜ„ÄÅÁîªÂÉèË™çË≠ò„Å™„Å©„ÅÆÊäÄË°ì„Åå‰ºÅÊ•≠„ÅÆÊ•≠ÂãôÂäπÁéáÂåñ„Å´Â§ß„Åç„ÅèË≤¢ÁåÆ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ',
          businessInsight: 'AIÊäÄË°ì„ÅÆÂ∞éÂÖ•„Å´„Çà„Çä„ÄÅ‰ºÅÊ•≠„ÅØÊ•≠Âãô„ÅÆËá™ÂãïÂåñ„Å®ÂäπÁéáÂåñ„ÇíÂÆüÁèæ„Åß„Åç„Åæ„Åô„ÄÇ„Åü„Å†„Åó„ÄÅÈÅ©Âàá„Å™„Éá„Éº„ÇøÁÆ°ÁêÜ„Å®„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÂØæÁ≠ñ„Åå‰∏çÂèØÊ¨†„Åß„Åô„ÄÇ',
          url: 'https://example.com/fallback-news',
          timestamp: new Date().toISOString(),
          category: 'technology',
          source: 'Fallback News',
        },
        {
          id: 'fallback-tech-2',
          title: '„ÇØ„É©„Ç¶„Éâ„Ç≥„É≥„Éî„É•„Éº„ÉÜ„Ç£„É≥„Ç∞„ÅÆÊôÆÂèä',
          summary: '„ÇØ„É©„Ç¶„Éâ„Çµ„Éº„Éì„Çπ„ÅÆÂà©Áî®„Åå‰ºÅÊ•≠„ÅÆ„Éá„Ç∏„Çø„É´Â§âÈù©„ÇíÂä†ÈÄü„Åï„Åõ„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Çπ„Ç±„Éº„É©„Éì„É™„ÉÜ„Ç£„ÄÅ„Ç≥„Çπ„ÉàÂäπÁéá„ÄÅ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÅÆÂêë‰∏ä„Å´„Çà„Çä„ÄÅÂ§ö„Åè„ÅÆ‰ºÅÊ•≠„Åå„ÇØ„É©„Ç¶„ÉâÁßªË°å„ÇíÈÄ≤„ÇÅ„Å¶„ÅÑ„Åæ„Åô„ÄÇ',
          businessInsight: '„ÇØ„É©„Ç¶„ÉâÁßªË°å„ÅØÂàùÊúüÊäïË≥á„ÇíË¶Å„Åó„Åæ„Åô„Åå„ÄÅÈï∑ÊúüÁöÑ„Å´„ÅØÈÅãÁî®„Ç≥„Çπ„Éà„ÅÆÂâäÊ∏õ„Å®ÊüîËªüÊÄß„ÅÆÂêë‰∏ä„Çí„ÇÇ„Åü„Çâ„Åó„Åæ„Åô„ÄÇÊÆµÈöéÁöÑ„Å™ÁßªË°åÊà¶Áï•„ÅåÊé®Â•®„Åï„Çå„Åæ„Åô„ÄÇ',
          url: 'https://example.com/fallback-news',
          timestamp: new Date().toISOString(),
          category: 'technology',
          source: 'Fallback News',
        },
      ],
      politics: [
        {
          id: 'fallback-politics-1',
          title: 'ÂõΩÈöõÊîøÊ≤ªÊÉÖÂã¢„Å®ÁµåÊ∏à„Å∏„ÅÆÂΩ±Èüø',
          summary: 'ÂõΩÈöõÊîøÊ≤ª„ÅÆÂãïÂêë„Åå‰∏ñÁïåÁµåÊ∏à„Å´Â§ß„Åç„Å™ÂΩ±Èüø„Çí‰∏é„Åà„Å¶„ÅÑ„Åæ„Åô„ÄÇË≤øÊòìÊîøÁ≠ñ„ÄÅÂ§ñ‰∫§Èñ¢‰øÇ„ÄÅÂú∞ÊîøÂ≠¶ÁöÑ„É™„Çπ„ÇØ„ÅÆÂ§âÂåñ„Åå‰ºÅÊ•≠„ÅÆÊà¶Áï•Ê±∫ÂÆö„Å´ÈáçË¶Å„Å™Ë¶ÅÁ¥†„Å®„Å™„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ',
          businessInsight: '‰ºÅÊ•≠„ÅØÂõΩÈöõÊîøÊ≤ªÊÉÖÂã¢„ÅÆÂ§âÂåñ„Å´ÊïèÊÑü„Å´ÂØæÂøú„Åó„ÄÅ„É™„Çπ„ÇØÁÆ°ÁêÜ„Å®Ê©ü‰ºöÂâµÂá∫„ÅÆ‰∏°Èù¢„Åã„ÇâÊà¶Áï•„ÇíÊ§úË®é„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÂ§öÊßòÂåñ„Å®ÊüîËªüÊÄß„ÅåÈçµ„Å®„Å™„Çä„Åæ„Åô„ÄÇ',
          url: 'https://example.com/fallback-news',
          timestamp: new Date().toISOString(),
          category: 'politics',
          source: 'Fallback News',
        },
        {
          id: 'fallback-politics-2',
          title: 'Ë¶èÂà∂Áí∞Â¢É„ÅÆÂ§âÂåñ„Å®‰ºÅÊ•≠ÂØæÂøú',
          summary: 'ÂêÑÂõΩ„ÅÆË¶èÂà∂Áí∞Â¢É„ÅåÊÄ•ÈÄü„Å´Â§âÂåñ„Åó„Å¶„Åä„Çä„ÄÅ‰ºÅÊ•≠„ÅØÊñ∞„Åü„Å™„Ç≥„É≥„Éó„É©„Ç§„Ç¢„É≥„ÇπË¶Å‰ª∂„Å´ÂØæÂøú„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÁí∞Â¢ÉË¶èÂà∂„ÄÅ„Éá„Éº„Çø‰øùË≠∑Ê≥ï„ÄÅÂä¥ÂÉçÊ≥ï„Å™„Å©„ÅÆÂ§âÊõ¥„Åå‰ºÅÊ•≠Êà¶Áï•„Å´ÂΩ±Èüø„Çí‰∏é„Åà„Å¶„ÅÑ„Åæ„Åô„ÄÇ',
          businessInsight: 'Ë¶èÂà∂ÂØæÂøú„ÅØÂçò„Å™„Çã„Ç≥„Çπ„Éà„Åß„ÅØ„Å™„Åè„ÄÅÁ´∂‰∫âÂÑ™‰ΩçÊÄß„ÇíÊßãÁØâ„Åô„ÇãÊ©ü‰ºö„Åß„ÇÇ„ÅÇ„Çä„Åæ„Åô„ÄÇÊó©ÊúüÂØæÂøú„Å´„Çà„ÇäÂ∏ÇÂ†¥„Åß„ÅÆ‰ø°È†ºÊÄßÂêë‰∏ä„ÅåÊúüÂæÖ„Åß„Åç„Åæ„Åô„ÄÇ',
          url: 'https://example.com/fallback-news',
          timestamp: new Date().toISOString(),
          category: 'politics',
          source: 'Fallback News',
        },
      ],
    }

    return fallbackNews[category].slice(0, limit)
  }

  async healthCheck(): Promise<boolean> {
    try {
      const response = await this.makeRequest(DIFY_CONFIG.endpoints.chat, {
        inputs: {
          trigger_type: 'ÂÖ®„Ç´„ÉÜ„Ç¥„É™„Éã„É•„Éº„ÇπÂèñÂæó (all_news)  ',
          category: 'ÁµåÊ∏à„Éª„Éì„Ç∏„Éç„Çπ (business)',
        },
        query: '„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ',
        response_mode: 'blocking',
        conversation_id: '',
        user: 'business-news-app',
      })
      return response && response.answer
    } catch (error) {
      console.error('Health check failed:', error)
      return false
    }
  }
}

export const difyClient = new DifyClient()
